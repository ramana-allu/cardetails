package net.uday.web.config;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Properties;import javax.servlet.ServletContext;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Import;import org.springframework.http.MediaType;import org.springframework.oxm.jaxb.Jaxb2Marshaller;import org.springframework.web.accept.ContentNegotiationManager;import org.springframework.web.servlet.ViewResolver;import org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;import org.springframework.web.servlet.config.annotation.EnableWebMvc;import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;import org.springframework.web.servlet.view.ContentNegotiatingViewResolver;import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;import com.vehicles.config.ApiConfig;import freemarker.template.utility.XmlEscape;@SuppressWarnings("SpringJavaAutowiringInspection")@Configuration@EnableWebMvc@Import(value = ApiConfig.class)@ComponentScan(basePackages = { "uday.web.controller" })public class ProductSetupSecurityConfig extends WebMvcConfigurerAdapter {	@Autowired	private ServletContext context;	@Override	public void addResourceHandlers(ResourceHandlerRegistry registry) {		registry.addResourceHandler("/resources/**").addResourceLocations(				"/resources/");	}	@Bean	public FreeMarkerConfigurer freemarkerConfigurer() {		FreeMarkerConfigurer freeMarkerConfigurer = new FreeMarkerConfigurer();		freeMarkerConfigurer.setTemplateLoaderPath("classpath:/ftl/");		Properties settings = new Properties();		settings.setProperty("number_format", "0.######");		freeMarkerConfigurer.setFreemarkerSettings(settings);		Map<String, Object> variables = new java.util.HashMap();		variables.put("xml_escape", new XmlEscape());		variables.put("contextPath", context.getContextPath());		variables.put("resourcePath", context.getContextPath() + "/static");		freeMarkerConfigurer.setFreemarkerVariables(variables);		return freeMarkerConfigurer;	}	@Override	public void configureContentNegotiation(			ContentNegotiationConfigurer configurer) {		configurer.ignoreAcceptHeader(true).defaultContentType(				MediaType.TEXT_HTML);	}	@Bean	public ViewResolver contentNegotiatingViewResolver(			ContentNegotiationManager manager) {		List<ViewResolver> resolvers = new ArrayList<ViewResolver>();		resolvers.add(freeMarkerViewResolver());		resolvers.add(jsonViewResolver());		resolvers.add(marshallingXmlViewResolver());		ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();		resolver.setViewResolvers(resolvers);		resolver.setContentNegotiationManager(manager);		return resolver;	}	@Bean	public ViewResolver marshallingXmlViewResolver() {		Jaxb2Marshaller marshaller = new Jaxb2Marshaller();		marshaller.setPackagesToScan(new String[] { "net.autodata.set.ps.domain" });		return new MarshallingXmlViewResolver(marshaller);	}	@Bean	public ViewResolver jsonViewResolver() {		return new JsonViewResolver();	}	@Bean	public ViewResolver freeMarkerViewResolver() {		FreeMarkerViewResolver resolver = new FreeMarkerViewResolver();		resolver.setOrder(1);		resolver.setPrefix("");		resolver.setCache(false);		resolver.setSuffix(".ftl");		resolver.setContentType("text/html;charset=UTF-8");		resolver.setExposeSpringMacroHelpers(true);		return resolver;	}}